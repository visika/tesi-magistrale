#!/usr/bin/env sh
# Questo programma calcola la componente armonica dell'energia libera.
# Per un insieme di temperature la tabella componente armonica vs. volume è messa nel file fh.s$s.k$k.$t.
# L'energia libera (punto zero + componente armonica) vs. volume è messa nel file free.s4.k$k.$t.
# Infine viene fatto un fit per trovare il volume di equilibrio a pressione zero in funzione della temperatura.
#
# Richiede: fit, in, u20 (energia di punto zero per vari volumi), POTCAR
# Genera: KPOINTS, INPHON, POSCAR, INCAR

########### HEADER

export MPI="mpirun"

# Prendi il percorso di VASP
export VASP="/lustre/home/tccourse/vasp46-da/vasp"

# Prendi il percorso di PHON
export PHON="/lustre/home/tccourse/Phon/src/phon"

export RUNPHON="$SLURM_SUBMIT_DIR/runphon"

###########

echo "Inizia free.s4.sh, questo è SLURM_SUBMIT_DIR: $SLURM_SUBMIT_DIR"

k=2
s=4

FILE_FIT=temp+equilibrium_volume
if [ -f $FILE_FIT ]; then
   rm $FILE_FIT
fi

cat >KPOINTS <<EOF
auto
 0
Gamma
$k $k $k
0 0 0
EOF

cat >INCAR <<EOF
ENCUT=400
NPAR=4
EOF

for t in 10 20 30 50 100 150 200 250 300 400 500 600; do
   FOLDER="$SLURM_SUBMIT_DIR/t$t"
   if [ ! -d "$FOLDER" ]; then
      mkdir "$FOLDER"
   fi
   cd "$FOLDER" || exit
   unset FOLDER

   for FILE in POTCAR INCAR KPOINTS fit in; do
      if [ ! -f "$FILE" ]; then
         ln -s "$SLURM_SUBMIT_DIR/$FILE" .
      fi
   done
   unset FILE

   FILE_HARMONIC=fh.s$s.k$k.t$t
   rm "$FILE_HARMONIC"
   # Varia la temperatura in INPHON
   cat >INPHON <<EOF
# number of ions types and masses
NTYPES = 1
MASS =26.98
LCENTRAL=.FALSE.
#LSYMM=.F.

# generate superlattice
LSUPER = .FALSE.
NDIM = $s $s $s
DXSTART = 1 -1 1
LFORCEOUT=.TRUE.

# free energy calculation
LFREE = .TRUE.
TEMPERATURE = $t
#PTEMP = 10 81

# q points section
LRECIP = .FALSE.
ND = 3
NPOINTS = 51
QI = 0.0        0.0        0.0 \
     1.0        1.0        0.0 \
     0.0        0.0        0.0

QF = 1.0        0.0        0.0 \
     0.0        0.0        0.0 \
     0.5        0.5        0.5

# density of states
LGAMMA = .FALSE.
QA = 8; QB = 8; QC = 8
DOSIN = 0
DOSEND = 10
DOSSTEP = 0.05
DOSSMEAR = 0.05

# verbosity
IPRINT = 0
EOF

   for v in 15.2 15.4 15.6 15.8 16.0 16.2 16.4 16.6 16.8 17.0; do
      if [ ! -d "v$v" ]; then
         mkdir "v$v"
      fi
      cd "v$v" || exit

      for FILE in POTCAR INCAR KPOINTS INPHON; do
         if [ ! -f $FILE ]; then
            ln -s ../$FILE .
         fi
      done
      unset FILE

      vol=$(echo $v | awk '{print 64*$1}')
      # Below we put the file corresponding to the 4x4x4 super-cell
      cat >POSCAR <<EOF
super cell
        -$vol
   2.000000000000000   0.000000000000000   2.000000000000000
   2.000000000000000   2.000000000000000   0.000000000000000
   0.000000000000000   2.000000000000000   2.000000000000000
   64
 Direct
   0.000000000000000   0.000000000000000   0.000000000000000
   0.250000000000000   0.000000000000000   0.000000000000000
   0.500000000000000   0.000000000000000   0.000000000000000
   0.750000000000000   0.000000000000000   0.000000000000000
   0.000000000000000   0.250000000000000   0.000000000000000
   0.250000000000000   0.250000000000000   0.000000000000000
   0.500000000000000   0.250000000000000   0.000000000000000
   0.750000000000000   0.250000000000000   0.000000000000000
   0.000000000000000   0.500000000000000   0.000000000000000
   0.250000000000000   0.500000000000000   0.000000000000000
   0.500000000000000   0.500000000000000   0.000000000000000
   0.750000000000000   0.500000000000000   0.000000000000000
   0.000000000000000   0.750000000000000   0.000000000000000
   0.250000000000000   0.750000000000000   0.000000000000000
   0.500000000000000   0.750000000000000   0.000000000000000
   0.750000000000000   0.750000000000000   0.000000000000000
   0.000000000000000   0.000000000000000   0.250000000000000
   0.250000000000000   0.000000000000000   0.250000000000000
   0.500000000000000   0.000000000000000   0.250000000000000
   0.750000000000000   0.000000000000000   0.250000000000000
   0.000000000000000   0.250000000000000   0.250000000000000
   0.250000000000000   0.250000000000000   0.250000000000000
   0.500000000000000   0.250000000000000   0.250000000000000
   0.750000000000000   0.250000000000000   0.250000000000000
   0.000000000000000   0.500000000000000   0.250000000000000
   0.250000000000000   0.500000000000000   0.250000000000000
   0.500000000000000   0.500000000000000   0.250000000000000
   0.750000000000000   0.500000000000000   0.250000000000000
   0.000000000000000   0.750000000000000   0.250000000000000
   0.250000000000000   0.750000000000000   0.250000000000000
   0.500000000000000   0.750000000000000   0.250000000000000
   0.750000000000000   0.750000000000000   0.250000000000000
   0.000000000000000   0.000000000000000   0.500000000000000
   0.250000000000000   0.000000000000000   0.500000000000000
   0.500000000000000   0.000000000000000   0.500000000000000
   0.750000000000000   0.000000000000000   0.500000000000000
   0.000000000000000   0.250000000000000   0.500000000000000
   0.250000000000000   0.250000000000000   0.500000000000000
   0.500000000000000   0.250000000000000   0.500000000000000
   0.750000000000000   0.250000000000000   0.500000000000000
   0.000000000000000   0.500000000000000   0.500000000000000
   0.250000000000000   0.500000000000000   0.500000000000000
   0.500000000000000   0.500000000000000   0.500000000000000
   0.750000000000000   0.500000000000000   0.500000000000000
   0.000000000000000   0.750000000000000   0.500000000000000
   0.250000000000000   0.750000000000000   0.500000000000000
   0.500000000000000   0.750000000000000   0.500000000000000
   0.750000000000000   0.750000000000000   0.500000000000000
   0.000000000000000   0.000000000000000   0.750000000000000
   0.250000000000000   0.000000000000000   0.750000000000000
   0.500000000000000   0.000000000000000   0.750000000000000
   0.750000000000000   0.000000000000000   0.750000000000000
   0.000000000000000   0.250000000000000   0.750000000000000
   0.250000000000000   0.250000000000000   0.750000000000000
   0.500000000000000   0.250000000000000   0.750000000000000
   0.750000000000000   0.250000000000000   0.750000000000000
   0.000000000000000   0.500000000000000   0.750000000000000
   0.250000000000000   0.500000000000000   0.750000000000000
   0.500000000000000   0.500000000000000   0.750000000000000
   0.750000000000000   0.500000000000000   0.750000000000000
   0.000000000000000   0.750000000000000   0.750000000000000
   0.250000000000000   0.750000000000000   0.750000000000000
   0.500000000000000   0.750000000000000   0.750000000000000
   0.750000000000000   0.750000000000000   0.750000000000000
EOF

      # DONE Se il file con le forze non esiste, bisogna generarlo con runphon

      FILE=FORCES.s$s.k$k.v$v
      if [ -f "$FILE" ]; then
         echo "File $FILE found"
         cp "$FILE" FORCES
      else
         echo "Running runphon to generate $FILE"
         $RUNPHON
         cp FORCES "$FILE"
      fi
      unset FILE

      $PHON | grep "Free energy " | awk -v v=$v '{print v,$3}' >>../"$FILE_HARMONIC"
      cd ..
   done #v

   FILE_HELMHOLTZ=free.s$s.k$k.t$t
   # Get the Helmholtz free energy as point zero + harmonic component
   # TODO Controlla che le righe nei due file siano in numero identico
   paste ../u20 "$FILE_HARMONIC" | awk '{print $1,$2+$4}' >"$FILE_HELMHOLTZ"

   # Fit to find the equilibrium volume
   cp "$FILE_HELMHOLTZ" tmp
   ./fit <in | grep "v0 =" | awk -v t=$t '{print t,$3}' >>"../$FILE_FIT"
   rm tmp
   cd ..
done #t
